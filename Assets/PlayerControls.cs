//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""305e86b8-4a7b-4043-927d-352270d4a9c3"",
            ""actions"": [
                {
                    ""name"": ""MovePlayer1"",
                    ""type"": ""Value"",
                    ""id"": ""459fa5a2-1400-43bf-8cb9-34a2c8fc81eb"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePlayer2"",
                    ""type"": ""Value"",
                    ""id"": ""eefac368-f917-46f8-a5c6-0c68a3ea3b62"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BoostPlayer1"",
                    ""type"": ""Button"",
                    ""id"": ""793daf57-1177-494a-aaed-7381870ae6bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BoostPlayer2"",
                    ""type"": ""Button"",
                    ""id"": ""442a160b-869e-43ae-b180-0009b280d310"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a45b2fa1-ddd5-4bf8-b444-12f5b1b00c58"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23db51f2-c64a-4637-bae4-cb90de026981"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3b6c959-53e4-4e7f-94da-97bd628f8714"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BoostPlayer1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4dfb0ed6-265b-448f-a2ec-22ca7f46f71d"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BoostPlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_MovePlayer1 = m_Gameplay.FindAction("MovePlayer1", throwIfNotFound: true);
        m_Gameplay_MovePlayer2 = m_Gameplay.FindAction("MovePlayer2", throwIfNotFound: true);
        m_Gameplay_BoostPlayer1 = m_Gameplay.FindAction("BoostPlayer1", throwIfNotFound: true);
        m_Gameplay_BoostPlayer2 = m_Gameplay.FindAction("BoostPlayer2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_MovePlayer1;
    private readonly InputAction m_Gameplay_MovePlayer2;
    private readonly InputAction m_Gameplay_BoostPlayer1;
    private readonly InputAction m_Gameplay_BoostPlayer2;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovePlayer1 => m_Wrapper.m_Gameplay_MovePlayer1;
        public InputAction @MovePlayer2 => m_Wrapper.m_Gameplay_MovePlayer2;
        public InputAction @BoostPlayer1 => m_Wrapper.m_Gameplay_BoostPlayer1;
        public InputAction @BoostPlayer2 => m_Wrapper.m_Gameplay_BoostPlayer2;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @MovePlayer1.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovePlayer1;
                @MovePlayer1.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovePlayer1;
                @MovePlayer1.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovePlayer1;
                @MovePlayer2.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovePlayer2;
                @MovePlayer2.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovePlayer2;
                @MovePlayer2.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovePlayer2;
                @BoostPlayer1.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBoostPlayer1;
                @BoostPlayer1.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBoostPlayer1;
                @BoostPlayer1.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBoostPlayer1;
                @BoostPlayer2.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBoostPlayer2;
                @BoostPlayer2.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBoostPlayer2;
                @BoostPlayer2.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnBoostPlayer2;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovePlayer1.started += instance.OnMovePlayer1;
                @MovePlayer1.performed += instance.OnMovePlayer1;
                @MovePlayer1.canceled += instance.OnMovePlayer1;
                @MovePlayer2.started += instance.OnMovePlayer2;
                @MovePlayer2.performed += instance.OnMovePlayer2;
                @MovePlayer2.canceled += instance.OnMovePlayer2;
                @BoostPlayer1.started += instance.OnBoostPlayer1;
                @BoostPlayer1.performed += instance.OnBoostPlayer1;
                @BoostPlayer1.canceled += instance.OnBoostPlayer1;
                @BoostPlayer2.started += instance.OnBoostPlayer2;
                @BoostPlayer2.performed += instance.OnBoostPlayer2;
                @BoostPlayer2.canceled += instance.OnBoostPlayer2;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMovePlayer1(InputAction.CallbackContext context);
        void OnMovePlayer2(InputAction.CallbackContext context);
        void OnBoostPlayer1(InputAction.CallbackContext context);
        void OnBoostPlayer2(InputAction.CallbackContext context);
    }
}
